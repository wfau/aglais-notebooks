{
  "paragraphs": [
    {
      "text": "%md\n\n# Using ML to define an astrometrically clean sample of stars\n\n   Follows Gaia EDR3 performance verification paper DPACP-81 (Smart et al.) in classifying astrometric solutions as good or bad\n   via supervised ML. Employs a Random Forrest classifier plus appropriately defined training sets - see\n\n   https://gaia.esac.esa.int/dpacsvn/DPAC/docs/DpacPublications/DR3PerformanceVerification/DPACP-81/main_submitted2308.pdf\n\n   (DPAC password protected) for further details. The work flow implemented here follows closely that described in Section 2, \"GCNS Generation\"\n   (GCNS \u003d Gaia Catalogue of Nearby Stars) and is designed to clean up a 100pc (\u003d nearby) sample.\n\n   Presently implemented for Gaia DR2; deploy and check this implementation against GEDR3 when released - it should reproduce what\u0027s in the paper.\n",
      "user": "gaiauser",
      "dateUpdated": "2021-12-02 10:12:15.967",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eUsing ML to define an astrometrically clean sample of stars\u003c/h1\u003e\n\u003cp\u003eFollows Gaia EDR3 performance verification paper DPACP-81 (Smart et al.) in classifying astrometric solutions as good or bad\u003cbr/\u003e via supervised ML. Employs a Random Forrest classifier plus appropriately defined training sets - see\u003c/p\u003e\n\u003cp\u003e\u003ca href\u003d\"https://gaia.esac.esa.int/dpacsvn/DPAC/docs/DpacPublications/DR3PerformanceVerification/DPACP-81/main_submitted2308.pdf\"\u003ehttps://gaia.esac.esa.int/dpacsvn/DPAC/docs/DpacPublications/DR3PerformanceVerification/DPACP-81/main_submitted2308.pdf\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e(DPAC password protected) for further details. The work flow implemented here follows closely that described in Section 2, \u0026ldquo;GCNS Generation\u0026rdquo;\u003cbr/\u003e (GCNS \u003d Gaia Catalogue of Nearby Stars) and is designed to clean up a 100pc (\u003d nearby) sample.\u003c/p\u003e\n\u003cp\u003ePresently implemented for Gaia DR2; deploy and check this implementation against GEDR3 when released - it should reproduce what\u0026rsquo;s in the paper.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1638439935967_513452117",
      "id": "20201013-131059_546082898",
      "dateCreated": "2021-12-02 10:12:15.967",
      "status": "READY"
    },
    {
      "text": "%spark.pyspark\n\n# this is the set of astrometric features to be used. In reality several iterations of this workflow might be required with an expanded set, and some figure-of-merit,\n# e.g. Gini index, would be used to select those most important to the RF classification - cf. Table A.1 in the GCNS paper.\nastrometric_features \u003d [\n    \u0027parallax_error\u0027, \n    \u0027parallax_over_error\u0027,\n    \u0027astrometric_sigma5d_max\u0027,\n    \u0027pmra_error\u0027,\n    \u0027pmdec_error\u0027,\n    \u0027astrometric_excess_noise\u0027,\n    #\u0027ipd_gof_harmonic_amplitude\u0027,\n    #\u0027ruwe\u0027,                             TODO: reinstate all at GEDR3 !!!\n    \u0027visibility_periods_used\u0027,\n    \u0027pmdec\u0027,\n    \u0027pmra\u0027,\n    #\u0027ipd_frac_odd_win\u0027,\n    #\u0027ipd_frac_multi_peak\u0027,\n    \u0027astrometric_gof_al\u0027,\n    #\u0027scan_direction_strength_k2\u0027,\n    \u0027parallax_pmdec_corr\u0027\n]\n# ... the last two are included to cross check against the Gini index results presented in the paper.\n\n# quick mode: set an additional precicate filter on random_index here to limit to 1% or 0.1% sampling etc:\nquick_filter \u003d \u0027 AND MOD(random_index, 10) \u003d 0\u0027\n# ... to switch this off, simply specify an empty string.\n\n# reformat the above attribute list into an SQL comma-separated select string\nfeatures_select_string \u003d (\u0027%s, \u0027*(len(astrometric_features) - 1) + \u0027%s \u0027)%tuple(astrometric_features)\n#print (features_select_string)\n\n# photometric consistency predicate - e.g. Evans et al. (2018), Babusiaux et al. (2018) for DR2:\nphotometric_consistency_filter \u003d \" AND phot_bp_rp_excess_factor BETWEEN 1.0 + (0.03 * POW(bp_rp, 2.0)) AND 1.3 + (0.06 * POW(bp_rp, 2.0))\"\n\n# define the data source\ngs_df \u003d sqlContext.read.parquet(\"/data/gaia/*.parquet\")\n\n# register as SQL-queryable \ngs_df.createOrReplaceTempView(\"gaia_source\")\n\n",
      "user": "gaiauser",
      "dateUpdated": "2021-12-02 10:12:15.967",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1638439935967_1117727958",
      "id": "20201013-131649_1734629667",
      "dateCreated": "2021-12-02 10:12:15.967",
      "status": "READY"
    },
    {
      "text": "%spark.pyspark\n\n# clear any previously cached data in the context (cells may be executed in any order, and out-dated by changes from here onwards)\nsqlContext.clearCache()\n\n# a conservative selection of everything that COULD be within 100pc, including things with measured \n# distances putting them outside the 100pc horizon when their true distances are within, and also including \n# loads of spurious chaff with the wheat of course, plus bad things with significant, unphysical parallaxes:\nraw_sources_df \u003d spark.sql(\"SELECT source_id, random_index, phot_g_mean_mag, phot_bp_rp_excess_factor, bp_rp, g_rp, parallax, ra, dec, b \" + features_select_string + \"FROM gaia_source WHERE ABS(parallax) \u003e 8.0\")\n\n# cache it for speedy access below (all subsequent samples are derived from this):\nraw_sources_df.cache()\n\n# register as SQL-queryable\nraw_sources_df.createOrReplaceTempView(\"raw_sources\")\n\nraw_sources_df.count()\n# (cf. GEDR3: 1,211,740 sources) ",
      "user": "gaiauser",
      "dateUpdated": "2021-12-02 10:12:15.967",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "2116773"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1638439935967_2132631587",
      "id": "20201013-132418_278702125",
      "dateCreated": "2021-12-02 10:12:15.967",
      "status": "READY"
    },
    {
      "text": "%spark.pyspark\n\n# plot an observational Hertzsprung-Russell diagram (aka colour / absolute magnitude diagram) for the unclassified sample to show the problem,\n# include the photometric consistency filter to show the problem is astrometric in addition to photometric\nunclassified_camd_df \u003d spark.sql(\"SELECT phot_g_mean_mag + 5.0*LOG10(parallax/100.0) AS m_g, g_rp FROM raw_sources WHERE parallax \u003e +8.0\" + quick_filter)# + photometric_consistency_filter)\n\nimport matplotlib.pyplot as plot\nplot.figure(0, figsize \u003d (6.0, 9.7))\nx \u003d list(unclassified_camd_df.select(\"g_rp\").toPandas()[\"g_rp\"])\ny \u003d list(unclassified_camd_df.select(\"m_g\").toPandas()[\"m_g\"])\nplot.scatter(x, y, marker \u003d \".\", s \u003d 1)\nplot.ylim(21.0, -3.0)\nplot.ylabel(\"Stellar brightness (absolute G magnitude) --\u003e\", fontsize \u003d 16)\nplot.xlabel(\"\u003c-- Stellar temperature (G - RP magnitude)\", fontsize \u003d 16)\nplot.show()\n\n",
      "user": "gaiauser",
      "dateUpdated": "2021-12-02 10:12:15.967",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u003cFigure size 432x698.4 with 1 Axes\u003e\n"
          },
          {
            "type": "IMG",
            "data": "\u003d\u003d\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1638439935967_1310728354",
      "id": "20201120-094650_221463065",
      "dateCreated": "2021-12-02 10:12:15.967",
      "status": "READY"
    },
    {
      "text": "%md\n\nThe problem: while we see astrophysically interesting locii in this diagram, the lower right (cool, low temperature) regime \u003cbr\u003e is dominated by systematic errors (not random uncertainties - the data should be equally precise in all parts of this data \u003cbr\u003e space) that contaminate the raw sample. We wish to clean the sample to obtain high reliability\n\n* without compromising completeness;\n* utilising quality features in the raw catalogue;\n* and efficiently; \n\ni.e. without endless iterations of manual, subjective, axis-parallel and arbitrary cuts on available catalogue attributes. A neat solution to this is to use supervised ML. In the Gaia EDR3 performance verification paper \"Gaia Catalogue of Nearby Stars\" (Smart, Sarro, Rybicki, et al. 2020) we use a Random Forest of decision trees on selected features having first defined a training set based on the data itself. \n\nNote that plotting the \u003ci\u003eintrinsic brightness\u003c/i\u003e of a star as above requires determination of the \u003ci\u003edistance\u003c/i\u003e to it along with a measurement of it\u0027s apparent brightness. Stellar distance determination is a fundamental goal of the Gaia mission and is achieved via measurement of the \u003ci\u003estellar parallax\u003c/i\u003e, the apparent \"wobble\" in angular position exhibited by all stars as seen from our (annually changing) view point in the solar system. The sample plotted above is selected for parallax \u003e 8 milliarcseconds (mas) which corresponds to a distance within 125 parsecs (since a star at distance 1 parsec exhibits a parallax of 1 arcsecond; parsec \u003d \"parallax arcsecond\"; 1 parsec is around 3.3 light-years).\n\nAn 8 mas training set of \"good\" examples is \"cleaned\" of highly probable spurious sources using \u003ci\u003eindependent\u003c/i\u003e photometric criteria (i.e. we require consistency of optical and infrared colours). The \"bad\" examples are selected having (unphysical) parallax \u003c -8 mas, i.e. using parallax measurements that are formally highly significant, yet obviously spurious. Under the assumption of normally distributed uncertainties on the parallax measurements, this bad sample should be representative of the corresponding spurious measurements having parallax \u003e 8 mas that contaminate the parallax-selected sample and, in particular, create the contamination illustrated in the plot above.\n",
      "user": "gaiauser",
      "dateUpdated": "2021-12-02 10:12:15.968",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eThe problem: while we see astrophysically interesting locii in this diagram, the lower right (cool, low temperature) regime \u003cbr\u003e is dominated by systematic errors (not random uncertainties - the data should be equally precise in all parts of this data \u003cbr\u003e space) that contaminate the raw sample. We wish to clean the sample to obtain high reliability\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003ewithout compromising completeness;\u003c/li\u003e\n  \u003cli\u003eutilising quality features in the raw catalogue;\u003c/li\u003e\n  \u003cli\u003eand efficiently;\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ei.e. without endless iterations of manual, subjective, axis-parallel and arbitrary cuts on available catalogue attributes. A neat solution to this is to use supervised ML. In the Gaia EDR3 performance verification paper \u0026ldquo;Gaia Catalogue of Nearby Stars\u0026rdquo; (Smart, Sarro, Rybicki, et al. 2020) we use a Random Forest of decision trees on selected features having first defined a training set based on the data itself. \u003c/p\u003e\n\u003cp\u003eNote that plotting the \u003ci\u003eintrinsic brightness\u003c/i\u003e of a star as above requires determination of the \u003ci\u003edistance\u003c/i\u003e to it along with a measurement of it\u0026rsquo;s apparent brightness. Stellar distance determination is a fundamental goal of the Gaia mission and is achieved via measurement of the \u003ci\u003estellar parallax\u003c/i\u003e, the apparent \u0026ldquo;wobble\u0026rdquo; in angular position exhibited by all stars as seen from our (annually changing) view point in the solar system. The sample plotted above is selected for parallax \u0026gt; 8 milliarcseconds (mas) which corresponds to a distance within 125 parsecs (since a star at distance 1 parsec exhibits a parallax of 1 arcsecond; parsec \u003d \u0026ldquo;parallax arcsecond\u0026rdquo;; 1 parsec is around 3.3 light-years).\u003c/p\u003e\n\u003cp\u003eAn 8 mas training set of \u0026ldquo;good\u0026rdquo; examples is \u0026ldquo;cleaned\u0026rdquo; of highly probable spurious sources using \u003ci\u003eindependent\u003c/i\u003e photometric criteria (i.e. we require consistency of optical and infrared colours). The \u0026ldquo;bad\u0026rdquo; examples are selected having (unphysical) parallax \u0026lt; -8 mas, i.e. using parallax measurements that are formally highly significant, yet obviously spurious. Under the assumption of normally distributed uncertainties on the parallax measurements, this bad sample should be representative of the corresponding spurious measurements having parallax \u0026gt; 8 mas that contaminate the parallax-selected sample and, in particular, create the contamination illustrated in the plot above.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1638439935968_1412641123",
      "id": "20201120-110502_1704727157",
      "dateCreated": "2021-12-02 10:12:15.968",
      "status": "READY"
    },
    {
      "text": "%spark.pyspark\n\n# bad training data: negative parallaxes:\nall_bad_training_df \u003d spark.sql(\"SELECT \" + features_select_string + \" FROM raw_sources WHERE parallax \u003c -8.0\" + quick_filter)\n\n# good training data: first define rough positional cuts to exclude crowded regions at low Gaialctic latitude and inside the Large and Small Magellanic Clouds (Luri et al. 2020):\nlow_galactic_latitude_filter \u003d \" AND ABS(b) \u003e 25.0\"\nsmc_filter \u003d \" AND (dec \u003c -80.0 OR dec \u003e -65.0 OR (ra \u003c 350.0 AND ra \u003e +40.0))\"\nlmc_filter \u003d \" AND (dec \u003c -80.0 OR dec \u003e -55.0 OR ra \u003c 40.0 OR ra \u003e 120.0)\"\nall_good_training_df \u003d spark.sql(\"SELECT \" + features_select_string + \" FROM raw_sources WHERE parallax \u003e + 8.0 AND ABS(b) \u003e 25.0 AND  \" + photometric_consistency_filter + quick_filter + low_galactic_latitude_filte + smc_filter + lmc_filter)\n\n",
      "user": "gaiauser",
      "dateUpdated": "2021-12-02 10:12:15.968",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1638439935968_1044213459",
      "id": "20201123-105445_95907042",
      "dateCreated": "2021-12-02 10:12:15.968",
      "status": "READY"
    },
    {
      "text": "%spark.pyspark\n\n# get the optical and infrared (2MASS) photometry for the set of examples of good astrometric solutions (uses GACS call-out for DPAC crossmatch at GDR2)\n#\n# TODO: replace this with an internal GEDR3/2MASS match (using AXS) when deployed.\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom astroquery.utils.tap.core import TapPlus\ngaia \u003d TapPlus(url\u003d\"https://gea.esac.esa.int/tap-server/tap\")\n\nadql_query \u003d \"SELECT g.source_id, \" + \\\n             \"phot_g_mean_mag - phot_rp_mean_mag AS g_rp, \" + \\\n             \"phot_g_mean_mag - j_m AS g_j, \" + \\\n             \"phot_g_mean_mag - h_m AS g_h, \" + \\\n             \"phot_g_mean_mag - ks_m AS g_ks, \" + \\\n             \"phot_g_mean_mag + 5.0*log10(parallax/100.0) AS mg, \" + features_select_string + \\\n             \"FROM gaiadr2.gaia_source AS g, gaiadr2.tmass_best_neighbour AS x, gaiadr1.tmass_original_valid AS t \" + \\\n             \"WHERE g.source_id \u003d x.source_id AND x.tmass_oid \u003d t.tmass_oid\" + quick_filter + \\\n             \" AND parallax \u003e 8.0 AND ABS(g.b) \u003e 25.0\" + \\\n             \" AND 0\u003dCONTAINS(POINT(\u0027ICRS\u0027, g.ra, g.dec), CIRCLE(\u0027ICRS\u0027, 12.80, -73.15, 11.0))\" + \\\n             \" AND 0\u003dCONTAINS(POINT(\u0027ICRS\u0027, g.ra, g.dec), CIRCLE(\u0027ICRS\u0027, 81.28, -69.78, 20.0))\"\n# ... last three predicates exclude low Galactic latitudes and the Magellanic Clouds (Luri et al. 2020).\n\n# execute the query\njob \u003d gaia.launch_job_async(adql_query)\nresults \u003d job.get_results()\nlen(results)\n# direct execution via the GACS UI yields a count of 291,394 in 2min\n",
      "user": "gaiauser",
      "dateUpdated": "2021-12-02 10:12:15.968",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Created TAP+ (v1.2.1) - Connection:\n\tHost: gea.esac.esa.int\n\tUse HTTPS: True\n\tPort: 443\n\tSSL Port: 443\nINFO: Query finished. [astroquery.utils.tap.core]\n29032"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1638439935968_721883687",
      "id": "20201013-134856_1401782262",
      "dateCreated": "2021-12-02 10:12:15.968",
      "status": "READY"
    },
    {
      "text": "%spark.pyspark\n\n# convenience reformatting from astropy.table.table.Table (?!) to Pandas:\n#pandas_results \u003d results.to_pandas()\n#print(results.columns)\n\n# numpy vectors of the optical/IR photometry:\nimport numpy as np\ngmrp \u003d np.array(results[\"g_rp\"])\ngmj \u003d np.array(results[\"g_j\"])\ngmh \u003d np.array(results[\"g_h\"])\ngmks \u003d np.array(results[\"g_ks\"])\ngabs \u003d np.array(results[\"mg\"])\n\ngidx \u003d ((gabs \u003e 15.0) \u0026 (gabs \u003c 16.0))\n\n# plot a colour-colour diagram of an absolute magnitude slice:\nplot.figure(1, figsize \u003d (8.0, 8.0))\nplot.scatter(gmrp[gidx], gmks[gidx], marker \u003d \".\", s \u003d 1)\nplot.xlabel(\"Optical colour (G - RP)\", fontsize \u003d 16)\nplot.ylabel(\"Optical / infrared colour (G - Ks)\", fontsize \u003d 16)\nplot.show()\n\n# to a Spark partitioned dataframe TODO may not be needed in final implementation\n#photometry_df \u003d spark.createDataFrame(pandas_results)\n\n# Sanity checks:\n#photometry_df.schema\n#photometry_df.rdd.getNumPartitions()\n#photometry_df.show()\n\n\n",
      "user": "gaiauser",
      "dateUpdated": "2021-12-02 10:12:15.968",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1638439935968_223718469",
      "id": "20201120-152045_79377630",
      "dateCreated": "2021-12-02 10:12:15.968",
      "status": "READY"
    },
    {
      "text": "%spark.pyspark\n\nplot.figure(3, figsize \u003d (6.0, 9.7))\nplot.scatter(gmj, gabs, marker \u003d \".\", s \u003d 1)\nplot.ylim(21.0, -3.0)\nplot.ylabel(\"Stellar brightness (absolute G magnitude) --\u003e\", fontsize \u003d 16)\nplot.xlabel(\"\u003c-- Stellar temperature (G - RP magnitude)\", fontsize \u003d 16)\nplot.show()",
      "user": "gaiauser",
      "dateUpdated": "2021-12-02 10:12:15.968",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1638439935968_1422806545",
      "id": "20201120-172300_1978140728",
      "dateCreated": "2021-12-02 10:12:15.968",
      "status": "READY"
    },
    {
      "text": "%spark.pyspark\n\n# TODO: refine the raw crossmatch photometry selection using GMM (WD, Red Clump and Giant Branch) and 5d Principal Curve (Main Sequence)\n# select them all for now:\ngood_ast_df \u003d photometry_df.select(astrometric_features)\ngood_ast_df.show()\n\n# record the number of good training solutions:\ngood_ast_count \u003d len(results)",
      "user": "gaiauser",
      "dateUpdated": "2021-12-02 10:12:15.968",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1638439935968_788285717",
      "id": "20201015-102158_1056136694",
      "dateCreated": "2021-12-02 10:12:15.968",
      "status": "READY"
    },
    {
      "text": "%spark.pyspark\n\n# bad astrometric solutions: negative (unphysical!) parallaxes at high significance where\n# the parallax threshold corresponds to that on the +ve (physical) side of the parallax distribution\nall_bad_ast_df \u003d spark.sql(\"SELECT source_id, random_index, \" + features_select_string + \"FROM gaia_source WHERE parallax \u003c -8.0\")\n\n# cache for for subsequent steps prior to count (aids performance... IIUC)\nall_bad_ast_df.cache()\nall_bad_ast_count \u003d all_bad_ast_df.count()\n\n# N.B. make a selection the same size as the good training set based on size of smaller (good) data set and count of all available bads\nfilter_factor \u003d int(all_bad_ast_count / good_ast_count)\nbad_ast_df \u003d all_bad_ast_df.where(\"MOD(random_index, %d) \u003d 0\"%(filter_factor))\nbad_ast_df.count()\n# (cf. GEDR3: 512,288 sources)\n\n",
      "user": "gaiauser",
      "dateUpdated": "2021-12-02 10:12:15.968",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "30113"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1638439935968_957283913",
      "id": "20201013-131204_2008164958",
      "dateCreated": "2021-12-02 10:12:15.968",
      "status": "READY"
    },
    {
      "text": "%spark.pyspark\n\n# first balance the good and bad samples: need the same number in both. The good sample will be the smaller of the two, \n# so define a bad sample the same size as that TODO\n\n\n# define training (67%) and test (33%) samples TODO\n\n\n\n# map the training data frames onto new RDD consisting of appropriately labeled [sic] LabelPoint objects\n\nfrom pyspark.mllib.regression import LabeledPoint\n\n# for the bad (label \u003d 0) training set\nbad_training_rdd \u003d bad_ast_df.drop(\u0027source_id\u0027).rdd.map(lambda row: LabeledPoint(0, [x for x in row]))\n\n# and for the good (label \u003d 1) set, need to drop also the photometry (these must not be used as features - see GCNS paper)\ngood_training_rdd \u003d good_ast_df.drop(\u0027source_id\u0027, \u0027gminusj\u0027, \u0027Mg\u0027, \u0027Mj\u0027, \u0027Mh\u0027, \u0027Mk\u0027).rdd.map(lambda row: LabeledPoint(1, [x for x in row]))\n\n# concatenate:\ntraining_rdd \u003d good_training_rdd.union(bad_training_rdd)\n\n# manual type safety check (!) - h:\n#type(training_rdd.collect()[0])\n\n",
      "user": "gaiauser",
      "dateUpdated": "2021-12-02 10:12:15.968",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1638439935968_110320928",
      "id": "20201015-161110_18118893",
      "dateCreated": "2021-12-02 10:12:15.968",
      "status": "READY"
    },
    {
      "text": "%spark.pyspark\n\n# This cell does the business, given the data and training sets. Follows the example Python code at \n# https://spark.apache.org/docs/latest/api/python/pyspark.mllib.html#pyspark.mllib.tree.RandomForest\n\nfrom pyspark.mllib.tree import RandomForest\n\n# instantiate a trained RF classifier, seeded for repeatability at this stage:\nmodel \u003d RandomForest.trainClassifier(training_rdd, numClasses \u003d 2, categoricalFeaturesInfo \u003d {}, featureSubsetStrategy \u003d 3, numTrees \u003d 100, impurity \u003d \u0027gini\u0027, seed\u003d42)\n# data should be an RDD of LabeledPoint, say 0 \u003d bad/negative, 1 \u003d good/positive: [LabeledPoint(0, [list of features of a bad example]), LabeledPoint(1, [list of features of a good example]), ... ]\n# type(model) \u003d RandomForestModel that can be used for prediction.\n# TODOs:\n# - DPACP-81 example \"The random Forest consists of 5000 decision trees built by selecting amongst three randomly selected predictors at each split.\" \n#   ... need to check that featureSubsetStrategy \u003d 3 option covers this and is appropriate to the task.\n\n# default featureSubsetStrategy:\n# Benchmarks: numTrees \u003d 10; 1% sampling: trains in 7m 09s \n#                       100 10          :           9m 24s !\n#                      5000 100         :\n\nmodel.numTrees()\n\nmodel.totalNumNodes()\n\n#print(model)\n\n#print(model.toDebugString())\n\n",
      "user": "gaiauser",
      "dateUpdated": "2021-12-02 10:12:15.969",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)\n\u001b[0;32m\u003cipython-input-156-9196ac297331\u003e\u001b[0m in \u001b[0;36m\u003cmodule\u003e\u001b[0;34m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# instantiate a trained RF classifier, seeded for repeatability at this stage:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----\u003e 7\u001b[0;31m \u001b[0mmodel\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mRandomForest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrainClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtraining_rdd\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnumClasses\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcategoricalFeaturesInfo\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeatureSubsetStrategy\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnumTrees\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mimpurity\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0;34m\u0027gini\u0027\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mseed\u001b[0m\u001b[0;34m\u003d\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;31m# data should be an RDD of LabeledPoint, say 0 \u003d bad/negative, 1 \u003d good/positive: [LabeledPoint(0, [list of features of a bad example]), LabeledPoint(1, [list of features of a good example]), ... ]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;31m# type(model) \u003d RandomForestModel that can be used for prediction.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/opt/spark/python/lib/pyspark.zip/pyspark/mllib/tree.py\u001b[0m in \u001b[0;36mtrainClassifier\u001b[0;34m(cls, data, numClasses, categoricalFeaturesInfo, numTrees, featureSubsetStrategy, impurity, maxDepth, maxBins, seed)\u001b[0m\n\u001b[1;32m    405\u001b[0m         return cls._train(data, \"classification\", numClasses,\n\u001b[1;32m    406\u001b[0m                           \u001b[0mcategoricalFeaturesInfo\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnumTrees\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeatureSubsetStrategy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mimpurity\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 407\u001b[0;31m                           maxDepth, maxBins, seed)\n\u001b[0m\u001b[1;32m    408\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    409\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mclassmethod\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/opt/spark/python/lib/pyspark.zip/pyspark/mllib/tree.py\u001b[0m in \u001b[0;36m_train\u001b[0;34m(cls, data, algo, numClasses, categoricalFeaturesInfo, numTrees, featureSubsetStrategy, impurity, maxDepth, maxBins, seed)\u001b[0m\n\u001b[1;32m    307\u001b[0m         \u001b[0;32massert\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfirst\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mLabeledPoint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"the data should be RDD of LabeledPoint\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    308\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mfeatureSubsetStrategy\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcls\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msupportedFeatureSubsetStrategies\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 309\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"unsupported featureSubsetStrategy: %s\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mfeatureSubsetStrategy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    310\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mseed\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    311\u001b[0m             \u001b[0mseed\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;34m\u003c\u003c\u001b[0m \u001b[0;36m30\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;31mValueError\u001b[0m: unsupported featureSubsetStrategy: 3"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1638439935969_1169441242",
      "id": "20201013-152110_1282917873",
      "dateCreated": "2021-12-02 10:12:15.969",
      "status": "READY"
    },
    {
      "text": "%spark.pyspark\n\n# classify based on the above trained model:\nclassifications \u003d model.predict(rdd).collect()\n",
      "user": "gaiauser",
      "dateUpdated": "2021-12-02 10:12:15.969",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1638439935969_650645978",
      "id": "20201015-131823_1744793710",
      "dateCreated": "2021-12-02 10:12:15.969",
      "status": "READY"
    },
    {
      "text": "%spark.pyspark\n\nspark.version\n\n",
      "user": "gaiauser",
      "dateUpdated": "2021-12-02 10:12:15.969",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u00272.4.4\u0027"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1638439935969_1480345555",
      "id": "20201016-154755_24366630",
      "dateCreated": "2021-12-02 10:12:15.969",
      "status": "READY"
    },
    {
      "text": "%spark.pyspark\n\n# test what the hell is going on:\nfrom pyspark.mllib.regression import LabeledPoint\nfrom pyspark.mllib.tree import RandomForest\ndata \u003d [\n     LabeledPoint(0.0, [0.0]),\n     LabeledPoint(0.0, [1.0]),\n     LabeledPoint(1.0, [2.0]),\n     LabeledPoint(1.0, [3.0])\n]\n\nmodel \u003d RandomForest.trainClassifier(sc.parallelize(data), 2, {}, 3, seed\u003d42)\nmodel.numTrees()\n\nmodel.totalNumNodes()\n\nprint(model)\n\nprint(model.toDebugString())\n\nmodel.predict([2.0])\n\nmodel.predict([0.0])\n\nrdd \u003d sc.parallelize([[3.0], [1.0]])\nmodel.predict(rdd).collect()",
      "user": "gaiauser",
      "dateUpdated": "2021-12-02 10:12:15.969",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "TreeEnsembleModel classifier with 3 trees\n\nTreeEnsembleModel classifier with 3 trees\n\n  Tree 0:\n    If (feature 0 \u003c\u003d 1.5)\n     Predict: 0.0\n    Else (feature 0 \u003e 1.5)\n     Predict: 1.0\n  Tree 1:\n    If (feature 0 \u003c\u003d 1.5)\n     Predict: 0.0\n    Else (feature 0 \u003e 1.5)\n     Predict: 1.0\n  Tree 2:\n    If (feature 0 \u003c\u003d 1.5)\n     Predict: 0.0\n    Else (feature 0 \u003e 1.5)\n     Predict: 1.0\n\n[1.0, 0.0]"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1638439935969_635426518",
      "id": "20201016-154805_154855220",
      "dateCreated": "2021-12-02 10:12:15.969",
      "status": "READY"
    },
    {
      "text": "%spark.pyspark\n",
      "user": "gaiauser",
      "dateUpdated": "2021-12-02 10:12:15.969",
      "progress": 0,
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1638439935969_2038339336",
      "id": "20201117-145251_855809116",
      "dateCreated": "2021-12-02 10:12:15.969",
      "status": "READY"
    }
  ],
  "name": "Good astrometric solutions via Random Forrest classifier",
  "id": "2GQRSSE8H",
  "defaultInterpreterGroup": "spark",
  "version": "0.10.0",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}